// Claude AI service integration
// Handles communication with Anthropic's Claude API for content analysis

const Anthropic = require('@anthropic-ai/sdk');

const TEMPERATURE = process.env.TEMPERATURE;

class ClaudeService {
    constructor() {
        this.client = new Anthropic({
            baseURL: process.env.ANTHROPIC_BASE_URL,
            apiKey: process.env.ANTHROPIC_API_KEY,
        });

        this.model = 'claude-3-haiku-20240307'; // Fast and cost-effective model
        this.maxTokens = 1000;
    }

    /**
     * Analyze webpage content using Claude AI
     * @param {Object} data - Content data to analyze
     * @returns {Promise<Object>} Analysis results
     */
    async analyzeContent(data) {
        // unpack
        const { url, title, content, metadata } = data;
        const prompt = this.buildAnalysisPrompt(url, title, content, metadata);

        const response = await this.client.messages.create({
            model: this.model,
            max_tokens: this.maxTokens,
            temperature: TEMPERATURE,
            messages: [
                {
                    role: 'user',
                    content: prompt
                }
            ]
        });

        const analysisText = response.content[0].text;
        return this.parseAnalysisResponse(analysisText);
    }

    /**
     * Build analysis prompt for Claude
     * @param {string} url - Page URL
     * @param {string} title - Page title
     * @param {Object} content - Page content
     * @param {Object} metadata - Page metadata
     * @returns {string} Formatted prompt
     */
    buildAnalysisPrompt(url, title, content, metadata) {
        const wordCount = content.wordCount || 0;
        const pageType = metadata?.pageType || 'general';
        const language = metadata?.language || 'unknown';

        // Prompt generated by AI
        let prompt = `Please analyze the following webpage content and provide a comprehensive evaluation. Return your analysis in JSON format with the specified structure.

**Webpage Information:**
- URL: ${url}
- Title: ${title}
- Type: ${pageType}
- Language: ${language}
- Word Count: ${wordCount}

**Content to Analyze:**
${content.text.substring(0, 8000)} ${content.text.length > 8000 ? '...[truncated]' : ''}

**Images:** ${content.images?.length || 0} images found
**Links:** ${content.links?.length || 0} links found

**Analysis Requirements:**
Please provide a detailed analysis and return ONLY a valid JSON object with this exact structure:

{
  "summary": "A concise 2-3 sentence summary of the main content and purpose",
  "qualityScore": 8,
  "credibility": "High|Medium|Low",
  "sentiment": "Positive|Neutral|Negative",
  "category": "News|Blog|Article|Product|Encyclopedia|Recipe|General",
  "readingTime": "X min read",
  "keyPoints": [
    "First key point or insight",
    "Second key point or insight",
    "Third key point or insight"
  ],
  "strengths": [
    "What makes this content valuable",
    "Quality aspects identified"
  ],
  "concerns": [
    "Any potential issues or limitations",
    "Areas that could be improved"
  ],
  "targetAudience": "Who this content is primarily intended for",
  "complexity": "Beginner|Intermediate|Advanced",
  "factualAccuracy": "High|Medium|Low|Cannot Determine",
  "bias": "None Detected|Slight|Moderate|Strong",
  "completeness": "Complete|Mostly Complete|Incomplete"
}

**Scoring Criteria for qualityScore (1-10):**
- 9-10: Exceptional content with high value, accuracy, and presentation
- 7-8: Good quality content with clear value and few issues
- 5-6: Average content with some value but notable limitations
- 3-4: Below average content with significant issues
- 1-2: Poor quality content with major problems

Focus on content quality, accuracy, usefulness, and presentation. Consider the target audience and purpose of the content.`;

        return prompt
    }

    /**
     * Parse Claude's analysis response
     * @param {string} responseText - Raw response from Claude
     * @returns {Object} Parsed analysis object
     */
    parseAnalysisResponse(responseText) {
        // Extract JSON from response (in case there's extra text)
        const jsonMatch = responseText.match(/\{[\s\S]*\}/);
        if (!jsonMatch) {
            throw new Error('No JSON found in response');
        }

        const analysis = JSON.parse(jsonMatch[0]);

        // Validate required fields
        const requiredFields = ['summary', 'qualityScore', 'credibility', 'sentiment', 'category'];
        for (const field of requiredFields) {
            if (!analysis[field]) {
                console.warn(`Missing required field: ${field}`);
            }
        }

        // Ensure qualityScore is a number between 1-10
        if (typeof analysis.qualityScore === 'string') {
            analysis.qualityScore = parseInt(analysis.qualityScore, 10);
        }
        analysis.qualityScore = Math.max(1, Math.min(10, analysis.qualityScore || 5));

        // Ensure arrays exist
        analysis.keyPoints = analysis.keyPoints || [];
        analysis.strengths = analysis.strengths || [];
        analysis.concerns = analysis.concerns || [];

        // Set defaults for optional fields
        analysis.targetAudience = analysis.targetAudience || 'General audience';
        analysis.complexity = analysis.complexity || 'Intermediate';
        analysis.factualAccuracy = analysis.factualAccuracy || 'Cannot Determine';
        analysis.bias = analysis.bias || 'None Detected';
        analysis.completeness = analysis.completeness || 'Mostly Complete';

        return analysis;
    }
}

module.exports = new ClaudeService();
